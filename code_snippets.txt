

---------------------- RideRepositoryImpl snippets ------------------------------------------------------------------------------

/*
	simple record insert
*/
@Override
	public Ride createRide(Ride ride) {
		jdbcTemplate.update("insert into ride (name, duration) values (?,?)", ride.getName(), ride.getDuration());
		return null;
	}
	
 /*
 	Alternative aproach to read back autogenerated record id value
 */	
@Override
	public Ride createRide(Ride ride) {
		
		
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update(new PreparedStatementCreator() {
			
			@Override
			public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
				PreparedStatement ps = con.prepareStatement("insert into ride (name, duration) values (?,?)", new String[] {"id"});
				ps.setString(1, ride.getName());
				ps.setInt(2, ride.getDuration());
				return ps;
			}
		},keyHolder);
		
		Number id = keyHolder.getKey();
		
		System.out.println("New ID: " + id);
		
		
		return getRide(id.intValue());
	}	
	
/*
	alternative aproach for creating database object and return record id using SimpleJdbcInsert 
*/	
@Override
	public Ride createRide(Ride ride) {
		
		SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
		insert.setGeneratedKeyName("id");
		
		Map<String, Object> data = new HashMap<>();
		data.put("name", ride.getName());
		data.put("duration", ride.getDuration());
		
		List<String> columns = new ArrayList<>();
		columns.add("name");
		columns.add("duration");
		
		insert.setTableName("ride");
		insert.setColumnNames(columns);
		Number id = insert.executeAndReturnKey(data);
		
		return getRide(id.intValue());
	}
	
	
	@Override
	public void deleteRide(Integer id) {
		jdbcTemplate.update("delete from ride where id = ?", id);
	}
	
	------------------------------- RideServiceImpl --------------------------------------------------------
	
	/*
		method throws exception and the transaction will be rolled back
	*/
	@Override
	@Transactional
	public void batch() {
		List<Ride> rides = getRides();
		List<Object[]> pairs = new ArrayList<>();
		 for (Ride ride : rides) {
			Object [] temp = {new Date(), ride.getId()};
			pairs.add(temp);
		}
		 rideRepository.updateRides(pairs);
		 
		throw new DataAccessException("testing") {
		};
	}